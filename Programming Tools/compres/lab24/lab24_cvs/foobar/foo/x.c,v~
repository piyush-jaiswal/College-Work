head     1.1;
branch   1.1.1;
access   ;
symbols  start:1.1.1.1 INFN:1.1.1;
locks    ; strict;
comment  @ * @;


1.1
date     2017.04.10.07.12.29;  author user;  state Exp;
branches 1.1.1.1;
next     ;
commitid        10058EB305A12E63137;

1.1.1.1
date     2017.04.10.07.12.29;  author user;  state Exp;
branches ;
next     ;
commitid        10058EB305A12E63137;


desc
@@



1.1
log
@Initial revision
@
text
@#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#define RANGE_OF_VALUES 3


void initialize_mat(int** mat, int r, int c)
{
	int i, j;
	srand(time(NULL));
	
	for(i = 0; i < r; i++)
		for(j = 0; j < c; j++)
			mat[i][j] = rand() % RANGE_OF_VALUES;
}


int** mmult(int** mat1, int** mat2, int r1, int c1, int r2, int c2)
{
	int i, j, k, sum = 0;
	
	int **result = (int**) malloc (sizeof(int*) * r1);
	for(i = 0; i < r1; i++)
		result[i] = (int*) malloc (sizeof(int) * c2);
	
	// Initialize the result matrix to 0
	for(i = 0; i < r1; i++)
		for(j = 0; j < c2; j++)
			result[i][j] = 0;
	
	// multiply the matrices
	for(i = 0; i < r1; i++)
	{
		for(j = 0; j < c2; j++)
		{
			for(k = 0; k < r2; k++)
			{
				result[i][j] +=  mat1[i][k] * mat2[k][j];
			}
		}
	}
	
	return result;
}


void display(int** mat, int r, int c)
{
	int i, j;
	
	printf("\n");
	for(i = 0; i < r; i++)
	{
		for(j = 0; j < c; j++)
			printf("%d ", mat[i][j]);
		printf("\n");
	}
	printf("\n");
}


int main()
{
	int r1, c1, r2, c2, i;
	
	printf("Enter the row and columns of the first matrix\n");
	scanf("%d %d", &r1, &c1);
	printf("Enter the row and columns of the second matrix. The row of the second matrix should be the same as the column of the first matrix.\n");
	scanf("%d %d", &r2, &c2);
	
	int **mat1 = (int **) malloc (sizeof(int*) * r1);
	for(i = 0; i < r1; i++)
		mat1[i] = (int*) malloc (sizeof(int) * c1);
		
	int **mat2 = (int **) malloc (sizeof(int*) * r2);
	for(i = 0; i < r2; i++)
		mat2[i] = (int*) malloc (sizeof(int) * c2);
	
	initialize_mat(mat1, r1, c1);
	initialize_mat(mat2, r2, c2);
		
	int **result;
	result = mmult(mat1, mat2, r1, c1, r2, c2);
	
	printf("First:\n");
	display(mat1, r1, c1);
	printf("second\n");
	display(mat2, r2, c2);
	printf("result:\n:);
	display(result, r1, c2);
	
	for(i = 0; i < r1; i++)
		free(mat1[i]);
	free(mat1);
	
	for(i = 0; i < r2; i++)
		free(mat2[i]);
	free(mat2);
	
	for(i = 0; i < r1; i++)
		free(result[i]);
	free(result);
	
	return 0;
}
@


1.1.1.1
log
@
@
text
@@
